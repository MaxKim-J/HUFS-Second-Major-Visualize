{"version":3,"sources":["config/themes.ts","components/chartResourceComponents/chartSearch/SearchSelect.tsx","utils/searchTheme.ts","components/chartResourceComponents/chartSearch/ThemeSearchSelect.tsx","components/chartComponents/ThemeDataChart.tsx","components/container/ThemeDataChartContainer.tsx","style/styledComponents/barChart.ts","components/chartResourceComponents/ChartTitle.tsx","components/chartResourceComponents/ChartMajorBox.tsx","style/styledComponents/majorBoxes.ts","components/chartResourceComponents/ChartNotice.tsx","components/chartResourceComponents/mainCharts/MainChartResources.tsx","config/chart.ts","components/chartResourceComponents/mainCharts/MainChart.tsx","utils/getChartData.ts"],"names":["seoulTheme","name","icon","globalTheme","semesterTheme","WithSearchSelect","themeArr","callFunction","useIcon","className","map","theme","idx","key","onClick","major","searchTheme","searchFor","majorArr","filter","elem","ThemeWithSearchSelect","campusName","majorData","updateSelectedThemeInfo","useState","setThemeArr","useEffect","SearchSelect","selectedThemeInfo","ThemeDataChart","setSelctedThemeInfo","ChartTitle","title","subTitle","ThemeSearchSelect","themeInfo","MainChart","selectedInfo","chartType","ChartNotice","majorNoticeType","ThemeDataChartContainer","data","useSelector","state","BarChartWrap","styled","div","BarChartLegendWrap","BarChartLegend","LegendColorBox","span","props","color","ChartBtn","ChartTitleContent","ChartSubTitleContent","MajorBox","MajorBoxCloseBtn","MajorBoxTitle","MajorBoxIcon","img","ChartMajorBox","cancelFunction","src","alt","label","emoji","ChartMajorBoxes","ChartNoticeBox","ChartNoticeContent","ChartNoticeTitle","ChartNoticeLine","ChartNoticeSection","MajorChartNotice","noticeResource","id","notice","split","GeneralChartNotice","MajorChart","direction","chart","setChartType","bar","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","isAnimationActive","barIdx","fill","line","lineIdx","type","stroke","strokeWidth","dot","length","BaChart","stackId","semester","chartColor","ChartWithVisualChart","chartData","setChartData","chartSection","forEach","value","chartValueValid","getMajorChartData","admissionInfo","admission","examPasser","examTaker","newSection","불합격자","합격자","응시자","getBaChartData"],"mappings":"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","file":"static/js/5.1a7a31c5.chunk.js","sourcesContent":["export type ThemeInfo = {\n  name: string\n  icon: string | null\n}\n\nexport const seoulTheme: ThemeInfo[] = [\n  { name: '영어대학', icon: './images/english.png' },\n  { name: '프랑스어학부', icon: './images/france.png' },\n  { name: '스페인어과', icon: './images/spain.png' },\n  { name: '마인어과', icon: './images/indonesia.png' },\n  { name: '베트남어과', icon: './images/vietnam.png' },\n  { name: '중국어대', icon: './images/china.png' },\n  { name: '일본어대', icon: './images/japan.png' },\n  { name: '사과대', icon: './images/social.png' },\n  { name: '미디어커뮤니케이션학부', icon: './images/broad.png' },\n  { name: '상경대학', icon: './images/line.png' },\n  { name: '경영학전공', icon: './images/business.png' },\n  { name: 'LD/LT', icon: './images/ldlt.png' },\n  { name: '인기융합전공', icon: './images/converge.png' },\n  { name: '국제학부', icon: './images/inter.png' },\n]\n\nexport const globalTheme: ThemeInfo[] = [\n  { name: '영어통번역학과', icon: './images/trans.png' },\n  { name: '경상대', icon: './images/bus.png' },\n  { name: '통계학과', icon: './images/statistics.png' },\n  { name: '인기융합전공', icon: './images/converge.png' },\n]\n\nexport const semesterTheme: ThemeInfo[] = [\n  { name: '2018-1', icon: null },\n  { name: '2018-2', icon: null },\n  { name: '2019-1', icon: null },\n  { name: '2019-2', icon: null },\n]\n","import React from 'react'\nimport ChartMajorBox from '../ChartMajorBox'\nimport { ChartMajorBoxes } from '../../../style/styledComponents/majorBoxes'\nimport { ThemeInfo } from '../../../config/themes'\n\ntype WithSearchSelectProps = {\n  themeArr: ThemeInfo[]\n  callFunction: (name: string) => void\n  useIcon: boolean\n}\n\nconst WithSearchSelect = ({\n  themeArr,\n  callFunction,\n  useIcon,\n}: WithSearchSelectProps) => {\n  return (\n    <div className=\"chart-search\">\n      <ChartMajorBoxes>\n        {themeArr.map((theme: ThemeInfo, idx: number) => (\n          <span key={idx} onClick={() => callFunction(theme.name)}>\n            <ChartMajorBox\n              major={theme.name}\n              icon={useIcon ? theme.icon : null}\n            />\n          </span>\n        ))}\n      </ChartMajorBoxes>\n    </div>\n  )\n}\n\nexport default WithSearchSelect\n","//* searchTheme함수 => theme을 입력하면 이 theme에 해당하는\nimport { MajorInfo } from '../../@types/majorData'\n\nconst searchTheme = (searchFor: string, majorArr: MajorInfo[]) => {\n  const result = majorArr.filter((elem: MajorInfo) => {\n    return elem.theme === searchFor\n  })\n\n  return result\n}\n\nexport default searchTheme\n","import React, { useState, useEffect } from 'react'\nimport { MajorInfo } from '../../../../@types/majorData'\nimport { seoulTheme, globalTheme } from '../../../config/themes'\nimport searchTheme from '../../../utils/searchTheme'\nimport { ThemeInfo } from '../../../config/themes'\nimport SearchSelect from './SearchSelect'\n\ntype ThemeWithSearchSelectProps = {\n  campusName: string\n  majorData: MajorInfo[]\n  updateSelectedThemeInfo: (themeInfo: MajorInfo[]) => void\n}\n\nconst ThemeWithSearchSelect = ({\n  campusName,\n  majorData,\n  updateSelectedThemeInfo,\n}: ThemeWithSearchSelectProps) => {\n  const [themeArr, setThemeArr] = useState<ThemeInfo[]>([])\n\n  useEffect(() => {\n    if (campusName) {\n      campusName === 'seoul'\n        ? setThemeArr(seoulTheme)\n        : setThemeArr(globalTheme)\n    }\n  }, [campusName])\n\n  const setSelectedThemeInfo = (theme: string) => {\n    const selectedThemeInfo = searchTheme(theme, majorData)\n    updateSelectedThemeInfo(selectedThemeInfo)\n  }\n\n  return (\n    <SearchSelect\n      useIcon={true}\n      themeArr={themeArr}\n      callFunction={setSelectedThemeInfo}\n    />\n  )\n}\n\nexport default ThemeWithSearchSelect\n","import React, { useState, useEffect } from 'react'\nimport { MajorInfo } from '../../../@types/majorData'\nimport ChartTitle from '../chartResourceComponents/ChartTitle'\nimport MainChart from '../chartResourceComponents/mainCharts/MainChart'\nimport ChartNotice from '../chartResourceComponents/ChartNotice'\nimport ThemeSearchSelect from '../chartResourceComponents/chartSearch/ThemeSearchSelect'\n\ntype ThemeDataChartProps = {\n  majorData: MajorInfo[]\n  campusName: string\n}\n\nconst ThemeDataChart = ({ majorData, campusName }: ThemeDataChartProps) => {\n  const [selectedThemeInfo, setSelctedThemeInfo] = useState<MajorInfo[]>([])\n\n  useEffect(() => {\n    setSelctedThemeInfo([])\n  }, [majorData])\n\n  const updateSelectedThemeInfo = (themeInfo: MajorInfo[]) => {\n    setSelctedThemeInfo(themeInfo)\n  }\n\n  return (\n    <>\n      <ChartTitle\n        title={'테마보기'}\n        subTitle={\n          '캠퍼스별 자주 찾는 이중전공 변경 여석 데이터를 모아봤습니다. 테마를 선택해 주세요'\n        }\n      />\n      <ThemeSearchSelect\n        campusName={campusName}\n        majorData={majorData}\n        updateSelectedThemeInfo={updateSelectedThemeInfo}\n      />\n      <MainChart selectedInfo={selectedThemeInfo} chartType={'major'} />\n      <ChartNotice selectedInfo={selectedThemeInfo} majorNoticeType={true} />\n    </>\n  )\n}\n\nexport default ThemeDataChart\n","import React from 'react'\nimport ThemeDataChart from '../chartComponents/ThemeDataChart'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducer'\nimport { State } from '../../../@types/reducer.d'\n\nconst ThemeDataChartContainer = () => {\n  const data: State = useSelector((state: RootState) => state.data)\n\n  return (\n    <ThemeDataChart\n      majorData={data.majorData.major}\n      campusName={data.campusName}\n    />\n  )\n}\n\nexport default ThemeDataChartContainer\n","import styled from 'styled-components'\n\nexport const BarChartWrap = styled.div`\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #f7f7f7;\n  margin-top: 1rem;\n`\nexport const BarChartLegendWrap = styled.div`\n  margin-top: 1rem;\n  display: flex;\n  justify-content: center;\n  @media screen and (max-width: 440px) {\n    flex-direction: column;\n  }\n`\n\nexport const BarChartLegend = styled.div`\n  margin-right: 1rem;\n  @media screen and (max-width: 750px) {\n    font-size: 0.8rem;\n  }\n\n  @media screen and (max-width: 420px) {\n    font-size: 0.6rem;\n    text-align: left;\n    margin-left: 1rem;\n  }\n`\nexport const LegendColorBox = styled.span`\n  background-color: ${props => props.color};\n  width: 12px;\n  height: 12px;\n  margin-right: 0.3rem;\n  display: inline-block;\n  margin-top: 1rem;\n`\n\nexport const ChartBtn = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 1rem;\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\ntype ChartTitleProps = {\n  title: string\n  subTitle?: string\n}\n\nconst ChartTitleContent = styled.div`\n  font-size: 1.6rem;\n  font-weight: 700;\n  margin-bottom: 0.7rem;\n`\nconst ChartSubTitleContent = styled.div`\n  margin-bottom: 1rem;\n`\n\nconst ChartTitle = ({ title, subTitle }: ChartTitleProps) => {\n  return (\n    <>\n      <ChartTitleContent>{title}</ChartTitleContent>\n      <ChartSubTitleContent>{subTitle}</ChartSubTitleContent>\n    </>\n  )\n}\n\nexport default ChartTitle\n","import React from 'react'\nimport styled from 'styled-components'\nimport Emoji from '../Emoji'\n\ntype ChartMajorBoxProps = {\n  major: string\n  icon?: string | null\n  cancelFunction?: (major: string) => void\n}\n\nconst MajorBox = styled.span`\n  padding: 0.2rem 1rem;\n  background-color: #f6f9fc;\n  border-radius: 20px;\n  margin: 0 0.5rem 0.5rem 0;\n  font-size: 0.8rem;\n  display: flex;\n  cursor: pointer;\n  transition: background-color 0.5s;\n  &:hover {\n    background-color: #d0d9e2;\n  }\n`\n\nconst MajorBoxCloseBtn = styled.div`\n  margin-left: 1rem;\n`\n\nconst MajorBoxTitle = styled.div`\n  font-size: 0.8rem;\n`\n\nconst MajorBoxIcon = styled.img`\n  width: 1rem;\n  height: 1rem;\n  margin-right: 0.3rem;\n  margin-top: 0.1rem;\n`\n\nconst ChartMajorBox = ({ major, icon, cancelFunction }: ChartMajorBoxProps) => {\n  return (\n    <MajorBox>\n      {icon ? <MajorBoxIcon src={icon} alt={icon} /> : null}\n      <MajorBoxTitle>{major}</MajorBoxTitle>\n      {cancelFunction ? (\n        <MajorBoxCloseBtn\n          className=\"chart-major-box-close\"\n          onClick={() => cancelFunction(major)}\n        >\n          <Emoji label=\"cancel\" emoji=\"❌\" />\n        </MajorBoxCloseBtn>\n      ) : null}\n    </MajorBox>\n  )\n}\n\nexport default ChartMajorBox\n","import styled from 'styled-components'\n\nexport const ChartMajorBoxes = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 90%;\n  transition: background-color 0.8s;\n\n  @media screen and (max-width: 750px) {\n    width: 95%;\n  }\n\n  @media screen and (max-width: 380px) {\n    width: 100%;\n  }\n`\n","import React from 'react'\nimport { MajorInfo } from '../../../@types/majorData'\nimport styled from 'styled-components'\n\ntype ChartNoticeProps = {\n  selectedInfo: MajorInfo[] | string[]\n  majorNoticeType?: boolean\n}\n\nconst ChartNoticeBox = styled.div`\n  padding-top: 1rem;\n`\n\nconst ChartNoticeContent = styled.div`\n  margin-bottom: 1rem;\n  @media screen and (max-width: 750px) {\n    font-size: 0.8rem;\n  }\n\n  @media screen and (max-width: 420px) {\n    font-size: 0.7rem;\n  }\n`\n\nconst ChartNoticeTitle = styled.div`\n  background-color: #ececec;\n  padding: 0.1rem 0.5rem;\n  margin-right: 0.8rem;\n  font-weight: 700;\n  display: inline-block;\n  margin-bottom: 0.2rem;\n`\n\nconst ChartNoticeLine = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: #e2e2e2;\n  margin-top: 1rem;\n  border-radius: 50%;\n`\nconst ChartNoticeSection = styled.div`\n  margin-bottom: 0.2rem;\n  padding-left: 0.5rem;\n`\n\nconst ChartNotice = ({ selectedInfo, majorNoticeType }: ChartNoticeProps) => {\n  return (\n    <ChartNoticeBox>\n      {majorNoticeType ? (\n        <MajorChartNotice noticeResource={selectedInfo as MajorInfo[]} />\n      ) : (\n        <GeneralChartNotice noticeResource={selectedInfo as string[]} />\n      )}\n    </ChartNoticeBox>\n  )\n}\n\nconst MajorChartNotice = ({\n  noticeResource,\n}: {\n  noticeResource: MajorInfo[]\n}) => {\n  return (\n    <>\n      {noticeResource.map((major: MajorInfo, id: number) =>\n        major.notice ? (\n          <ChartNoticeContent key={id}>\n            <ChartNoticeTitle>{major.name} 지원 유의사항</ChartNoticeTitle>\n            <div>\n              {major.notice.split('&').map((notice: string, idx: number) => (\n                <ChartNoticeSection key={idx}>\n                  {idx + 1}. {notice}\n                </ChartNoticeSection>\n              ))}\n            </div>\n            <ChartNoticeLine />\n          </ChartNoticeContent>\n        ) : null,\n      )}\n    </>\n  )\n}\n\nconst GeneralChartNotice = ({\n  noticeResource,\n}: {\n  noticeResource: string[]\n}) => {\n  return (\n    <>\n      <ChartNoticeContent>\n        <ChartNoticeTitle>유의사항</ChartNoticeTitle>\n        <div>\n          {noticeResource.map((notice: string, idx: number) => (\n            <ChartNoticeSection key={idx}>\n              {idx + 1}. {notice}\n            </ChartNoticeSection>\n          ))}\n        </div>\n      </ChartNoticeContent>\n    </>\n  )\n}\n\nexport default ChartNotice\n","import React, { useState } from 'react'\nimport { ChartData, ChartDirection } from '../../../../@types/barChart'\nimport { InputBtn } from '../../../style/styledComponents/input'\n\nimport {\n  BarChartWrap,\n  BarChartLegend,\n  BarChartLegendWrap,\n  LegendColorBox,\n  ChartBtn,\n} from '../../../style/styledComponents/barChart'\n\nimport {\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n} from 'recharts'\n\nexport const MajorChart = ({ direction, chart }: ChartData) => {\n  const [chartType, setChartType] = useState<boolean>(true)\n  return (\n    <BarChartWrap>\n      <BarChartLegendWrap>\n        {direction.map((bar: ChartDirection, idx: number) => (\n          <BarChartLegend key={idx}>\n            <LegendColorBox color={bar.color}></LegendColorBox>\n            <span>{bar.title}</span>\n          </BarChartLegend>\n        ))}\n      </BarChartLegendWrap>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <ComposedChart\n          data={chart}\n          margin={{ top: 30, right: 30, left: -20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip isAnimationActive={false} />\n          {chartType\n            ? direction.map((bar: ChartDirection, barIdx: number) => (\n                <Bar key={barIdx} dataKey={bar.title} fill={bar.color} />\n              ))\n            : direction.map((line: ChartDirection, lineIdx: number) => (\n                <Line\n                  type=\"linear\"\n                  key={lineIdx}\n                  dataKey={line.title}\n                  stroke={line.color}\n                  strokeWidth={4}\n                  dot={{ strokeWidth: 6 }}\n                />\n              ))}\n        </ComposedChart>\n      </ResponsiveContainer>\n      <ChartBtn>\n        {direction.length > 0 ? (\n          <InputBtn onClick={() => setChartType(!chartType)}>\n            {chartType ? '꺾은선 그래프로 바꾸기' : '막대 그래프로 바꾸기'}\n          </InputBtn>\n        ) : null}\n      </ChartBtn>\n    </BarChartWrap>\n  )\n}\n\nexport const BaChart = ({ direction, chart }: ChartData) => {\n  return (\n    <BarChartWrap>\n      <BarChartLegendWrap>\n        {direction.map((bar: ChartDirection, idx: number) => (\n          <BarChartLegend key={idx}>\n            <LegendColorBox color={bar.color}></LegendColorBox>\n            <span>{bar.title}</span>\n          </BarChartLegend>\n        ))}\n      </BarChartLegendWrap>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <ComposedChart\n          data={chart}\n          margin={{ top: 30, right: 30, left: -20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip isAnimationActive={false} />\n          <Bar dataKey=\"합격자\" stackId=\"a\" fill=\"#82ca9d\" />\n          <Bar dataKey=\"불합격자\" stackId=\"a\" fill=\"#FFC658\" />\n          <Line dataKey=\"응시자\" strokeWidth={3} stroke={'#8884D8'} />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </BarChartWrap>\n  )\n}\n","export const semester: string[] = ['2018-2', '2019-1', '2019-2', '2020-1']\nexport const chartColor: string[] = ['#8884d8', '#82ca9d', '#ffc658']\n","import React, { useState, useEffect } from 'react'\nimport { MajorInfo } from '../../../../@types/majorData'\nimport { ChartData } from '../../../../@types/barChart'\nimport { MajorChart, BaChart } from './MainChartResources'\nimport { getMajorChartData, getBaChartData } from '../../../utils/getChartData'\nimport { passPerAdmission, baParsingResult } from '../../../../@types/baData'\n\ntype ChartVisualBarChartProps = {\n  selectedInfo: MajorInfo[] | passPerAdmission[]\n  chartType: string\n  globalBaData?: baParsingResult\n}\n\nconst ChartWithVisualChart = ({\n  selectedInfo,\n  chartType,\n}: ChartVisualBarChartProps) => {\n  const [chartData, setChartData] = useState<ChartData>({\n    direction: [],\n    chart: [],\n  })\n\n  useEffect(() => {\n    if (selectedInfo) {\n      const chartData =\n        chartType === 'major'\n          ? getMajorChartData(selectedInfo as MajorInfo[])\n          : getBaChartData(selectedInfo as passPerAdmission[])\n      setChartData(chartData)\n    }\n  }, [selectedInfo, chartType])\n\n  const { direction, chart } = chartData\n\n  return (\n    <>\n      {chartType === 'major' ? (\n        <MajorChart direction={direction} chart={chart} />\n      ) : (\n        <BaChart direction={direction} chart={chart} />\n      )}\n    </>\n  )\n}\n\nexport default ChartWithVisualChart\n","//* 선택된 데이터를 차트 컴포넌트가 요구하는 형식으로 바꾸는 함수\n\nimport { MajorInfo } from '../../@types/majorData'\nimport {\n  ChartData,\n  ChartDirection,\n  ChartSection,\n  baChartSection,\n} from '../../@types/barChart'\nimport { passPerAdmission } from '../../@types/baData'\nimport { semester, chartColor } from '../config/chart'\n\nconst chartValueValid = (value: number) => {\n  switch (value) {\n    case -1: {\n      return '데이터 없음'\n    }\n    case -2: {\n      return '제한 없음'\n    }\n    default: {\n      return value\n    }\n  }\n}\n\nexport const getBaChartData = (selectedInfo: passPerAdmission[]): ChartData => {\n  let chartSection: baChartSection[] = []\n  let direction: ChartDirection[] = [\n    { title: '응시자', color: '#8884D8' },\n    { title: '불합격자', color: '#FFC658' },\n    { title: '합격자', color: '#82ca9d' },\n  ]\n\n  selectedInfo.forEach((admissionInfo: passPerAdmission): void => {\n    const { id, admission, examPasser, examTaker } = admissionInfo\n    const newSection: baChartSection = {\n      id: id,\n      name: `${admission}학번`,\n      불합격자: examTaker - examPasser,\n      합격자: examPasser,\n      응시자: examTaker,\n    }\n    chartSection = [...chartSection, newSection as baChartSection]\n  })\n  const result: ChartData = { direction: direction, chart: chartSection }\n  return result\n}\n\nexport const getMajorChartData = (selectedInfo: MajorInfo[]): ChartData => {\n  let chartSection: ChartSection[] = []\n  let direction: ChartDirection[] = []\n\n  selectedInfo.forEach((major: MajorInfo, idx: number) => {\n    direction = [\n      ...direction,\n      { title: major.name, color: chartColor[idx] } as ChartDirection,\n    ]\n  })\n\n  semester.forEach((elem: string, idx: number) => {\n    chartSection = [...chartSection, { name: elem } as ChartSection]\n    selectedInfo.forEach((major: MajorInfo) => {\n      chartSection[idx][major.name] = chartValueValid(major.data[idx])\n    })\n  })\n\n  const result: ChartData = { direction: direction, chart: chartSection }\n  return result\n}\n"],"sourceRoot":""}