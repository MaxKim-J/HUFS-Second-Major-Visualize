{"version":3,"sources":["config/themes.ts","components/chartResourceComponents/chartSearch/SearchSelect.tsx","components/chartResourceComponents/chartSearch/BaSearchSelect.tsx","components/chartResourceComponents/BaChartDetail.tsx","config/baNotice.ts","components/chartComponents/BaDataChart.tsx","components/container/BaDataChartConatainer.tsx","style/styledComponents/barChart.ts","components/chartResourceComponents/ChartTitle.tsx","components/chartResourceComponents/ChartMajorBox.tsx","style/styledComponents/majorBoxes.ts","components/chartResourceComponents/ChartNotice.tsx","components/chartResourceComponents/mainCharts/MainChartResources.tsx","config/chart.ts","components/chartResourceComponents/mainCharts/MainChart.tsx","utils/getChartData.ts"],"names":["seoulTheme","name","icon","globalTheme","semesterTheme","WithSearchSelect","themeArr","callFunction","useIcon","className","map","theme","idx","key","onClick","major","BaWithSearchSelect","onGetBaDataByInput","SearchSelect","semester","BaDetailContent","styled","div","BaDetailContentPart","BaDetailLine","BaDetailPartTitle","BaDetailTitle","BaDetailPartContent","BaChartAndDetail","baData","passScore","averageScore","examPasser","examTaker","passRatio","toFixed","baNotices","BaDataChart","passPerAdmission","ChartTitle","title","subTitle","BaSearchSelect","MainChart","selectedInfo","chartType","BaChartDetail","ChartNotice","baNotice","majorNoticeType","BaDataChartContainer","data","useSelector","state","dispatch","useDispatch","getBaDataByInput","BarChartWrap","BarChartLegendWrap","BarChartLegend","LegendColorBox","span","props","color","ChartBtn","ChartTitleContent","ChartSubTitleContent","MajorBox","MajorBoxCloseBtn","MajorBoxTitle","MajorBoxIcon","img","ChartMajorBox","cancelFunction","src","alt","label","emoji","ChartMajorBoxes","ChartNoticeBox","ChartNoticeContent","ChartNoticeTitle","ChartNoticeLine","ChartNoticeSection","MajorChartNotice","noticeResource","id","notice","split","GeneralChartNotice","MajorChart","direction","chart","useState","setChartType","bar","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","isAnimationActive","barIdx","fill","line","lineIdx","type","stroke","strokeWidth","dot","length","BaChart","stackId","chartColor","ChartWithVisualChart","chartData","setChartData","useEffect","chartSection","forEach","elem","value","chartValueValid","getMajorChartData","admissionInfo","admission","newSection","불합격자","합격자","응시자","getBaChartData"],"mappings":"4IAKA,sGAAO,IAAMA,EAA0B,CACrC,CAAEC,KAAM,2BAAQC,KAAM,wBACtB,CAAED,KAAM,uCAAUC,KAAM,uBACxB,CAAED,KAAM,iCAASC,KAAM,sBACvB,CAAED,KAAM,2BAAQC,KAAM,0BACtB,CAAED,KAAM,iCAASC,KAAM,wBACvB,CAAED,KAAM,2BAAQC,KAAM,sBACtB,CAAED,KAAM,2BAAQC,KAAM,sBACtB,CAAED,KAAM,qBAAOC,KAAM,uBACrB,CAAED,KAAM,qEAAeC,KAAM,sBAC7B,CAAED,KAAM,2BAAQC,KAAM,qBACtB,CAAED,KAAM,iCAASC,KAAM,yBACvB,CAAED,KAAM,QAASC,KAAM,qBACvB,CAAED,KAAM,uCAAUC,KAAM,yBACxB,CAAED,KAAM,2BAAQC,KAAM,uBAGXC,EAA2B,CACtC,CAAEF,KAAM,6CAAWC,KAAM,sBACzB,CAAED,KAAM,qBAAOC,KAAM,oBACrB,CAAED,KAAM,2BAAQC,KAAM,2BACtB,CAAED,KAAM,uCAAUC,KAAM,0BAGbE,EAA6B,CACxC,CAAEH,KAAM,SAAUC,KAAM,MACxB,CAAED,KAAM,SAAUC,KAAM,MACxB,CAAED,KAAM,SAAUC,KAAM,MACxB,CAAED,KAAM,SAAUC,KAAM,Q,iCCjC1B,oCAgCeG,IArBU,SAAC,GAII,IAH5BC,EAG2B,EAH3BA,SACAC,EAE2B,EAF3BA,aACAC,EAC2B,EAD3BA,QAEA,OACE,yBAAKC,UAAU,gBACb,kBAAC,IAAD,KACGH,EAASI,KAAI,SAACC,EAAkBC,GAAnB,OACZ,0BAAMC,IAAKD,EAAKE,QAAS,kBAAMP,EAAaI,EAAMV,QAChD,kBAAC,IAAD,CACEc,MAAOJ,EAAMV,KACbC,KAAMM,EAAUG,EAAMT,KAAO,e,sFCC5Bc,EAhBY,SAAC,GAEI,IAD9BC,EAC6B,EAD7BA,mBAMA,OACE,kBAACC,EAAA,EAAD,CACEV,SAAS,EACTF,SAAUF,IACVG,aARwB,SAACY,GAC3BF,EAAmBE,O,ypCCHvB,IAAMC,EAAkBC,IAAOC,IAAV,KAOfC,EAAsBF,IAAOC,IAAV,KAInBE,EAAeH,IAAOC,IAAV,KAOZG,EAAoBJ,IAAOC,IAAV,KAUjBI,EAAgBL,IAAOC,IAAV,KAYbK,EAAsBN,IAAOC,IAAV,KAiDVM,EAtCU,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAClBV,EAA6DU,EAA7DV,SAAUW,EAAmDD,EAAnDC,UAAWC,EAAwCF,EAAxCE,aAAcC,EAA0BH,EAA1BG,WAAYC,EAAcJ,EAAdI,UACjDC,GAAcF,EAAaC,EAAa,KAAKE,QAAQ,GAE3D,OACE,oCACGN,EAAOV,UACN,kBAAC,IAAD,KACE,6BACE,kBAACO,EAAD,mCAAuBP,GACvB,kBAACK,EAAD,OAEF,kBAACJ,EAAD,KACE,kBAACG,EAAD,KACE,kBAACE,EAAD,iCACA,kBAACE,EAAD,KAAsBG,EAAtB,QAEF,kBAACP,EAAD,KACE,kBAACE,EAAD,iCACA,kBAACE,EAAD,KAAsBI,EAAtB,QAEF,kBAACR,EAAD,KACE,kBAACE,EAAD,kCACA,kBAACE,EAAD,KACGK,EADH,IACgBC,EADhB,WAIF,kBAACV,EAAD,KACE,kBAACE,EAAD,2BACA,kBAACE,EAAD,KAAsBO,EAAtB,UClFCE,EAPa,CAC1B,mSACA,sIACA,2PACA,gK,QCgCaC,EAtBK,SAAC,GAAsD,IAApDR,EAAmD,EAAnDA,OAAQZ,EAA2C,EAA3CA,mBACrBqB,EAAqBT,EAArBS,iBAER,OACE,oCACE,kBAACC,EAAA,EAAD,CACEC,MAAO,kEACPC,SACE,gRAGJ,kBAACC,EAAD,CAAgBzB,mBAAoBA,IACpC,kBAAC0B,EAAA,EAAD,CAAWC,aAAcN,EAAkBO,UAAW,OACtD,kBAACC,EAAD,CAAejB,OAAQA,IACvB,kBAACkB,EAAA,EAAD,CACEH,aAAcI,EACdC,iBAAiB,M,eCVVC,UAbc,WAC3B,IAAMC,EAAcC,aAAY,SAACC,GAAD,OAAsBA,EAAMF,QACtDG,EAAWC,cAMjB,OACE,kBAAC,EAAD,CAAa1B,OAAQsB,EAAKtB,OAAQZ,mBALT,SAACE,GAC1BmC,EAASE,YAAiBrC,S,gwCCVvB,IAAMsC,EAAepC,IAAOC,IAAV,KAQZoC,EAAqBrC,IAAOC,IAAV,KASlBqC,EAAiBtC,IAAOC,IAAV,KAYdsC,EAAiBvC,IAAOwC,KAAV,KACL,SAAAC,GAAK,OAAIA,EAAMC,SAQxBC,EAAW3C,IAAOC,IAAV,M,6SChCrB,IAAM2C,EAAoB5C,IAAOC,IAAV,KAKjB4C,EAAuB7C,IAAOC,IAAV,KAaXiB,IATI,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,SAC3B,OACE,oCACE,kBAACwB,EAAD,KAAoBzB,GACpB,kBAAC0B,EAAD,KAAuBzB,M,muBCX7B,IAAM0B,EAAW9C,IAAOwC,KAAV,KAcRO,EAAmB/C,IAAOC,IAAV,KAIhB+C,EAAgBhD,IAAOC,IAAV,KAIbgD,EAAejD,IAAOkD,IAAV,KAwBHC,IAjBO,SAAC,GAAyD,IAAvDzD,EAAsD,EAAtDA,MAAOb,EAA+C,EAA/CA,KAAMuE,EAAyC,EAAzCA,eACpC,OACE,kBAACN,EAAD,KACGjE,EAAO,kBAACoE,EAAD,CAAcI,IAAKxE,EAAMyE,IAAKzE,IAAW,KACjD,kBAACmE,EAAD,KAAgBtD,GACf0D,EACC,kBAACL,EAAD,CACE3D,UAAU,wBACVK,QAAS,kBAAM2D,EAAe1D,KAE9B,kBAAC,IAAD,CAAO6D,MAAM,SAASC,MAAM,YAE5B,Q,oXCjDH,IAAMC,E,KAAkBzD,EAAOC,IAAV,M,25BCO5B,IAAMyD,EAAiB1D,IAAOC,IAAV,KAId0D,EAAqB3D,IAAOC,IAAV,KAWlB2D,EAAmB5D,IAAOC,IAAV,KAShB4D,EAAkB7D,IAAOC,IAAV,KAOf6D,EAAqB9D,IAAOC,IAAV,KAiBlB8D,EAAmB,SAAC,GAInB,IAHLC,EAGI,EAHJA,eAIA,OACE,oCACGA,EAAe3E,KAAI,SAACK,EAAkBuE,GAAnB,OAClBvE,EAAMwE,OACJ,kBAACP,EAAD,CAAoBnE,IAAKyE,GACvB,kBAACL,EAAD,KAAmBlE,EAAMd,KAAzB,0CACA,6BACGc,EAAMwE,OAAOC,MAAM,KAAK9E,KAAI,SAAC6E,EAAgB3E,GAAjB,OAC3B,kBAACuE,EAAD,CAAoBtE,IAAKD,GACtBA,EAAM,EADT,KACc2E,OAIlB,kBAACL,EAAD,OAEA,UAMNO,EAAqB,SAAC,GAIrB,IAHLJ,EAGI,EAHJA,eAIA,OACE,oCACE,kBAACL,EAAD,KACE,kBAACC,EAAD,iCACA,6BACGI,EAAe3E,KAAI,SAAC6E,EAAgB3E,GAAjB,OAClB,kBAACuE,EAAD,CAAoBtE,IAAKD,GACtBA,EAAM,EADT,KACc2E,UASXxC,IA3DK,SAAC,GAAyD,IAAvDH,EAAsD,EAAtDA,aAAcK,EAAwC,EAAxCA,gBACnC,OACE,kBAAC8B,EAAD,KACG9B,EACC,kBAACmC,EAAD,CAAkBC,eAAgBzC,IAElC,kBAAC6C,EAAD,CAAoBJ,eAAgBzC,O,mFC5B/B8C,EAAa,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,MAAuB,EAC3BC,oBAAkB,GADS,mBACtDhD,EADsD,KAC3CiD,EAD2C,KAE7D,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGH,EAAUjF,KAAI,SAACqF,EAAqBnF,GAAtB,OACb,kBAAC,IAAD,CAAgBC,IAAKD,GACnB,kBAAC,IAAD,CAAgBmD,MAAOgC,EAAIhC,QAC3B,8BAAOgC,EAAIvD,YAIjB,kBAAC,IAAD,CAAqBwD,MAAM,OAAOC,OAAQ,KACxC,kBAAC,IAAD,CACE9C,KAAMyC,EACNM,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,MAAO,GAAIC,OAAQ,IAEjD,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,CAASC,mBAAmB,IAC3B5D,EACG8C,EAAUjF,KAAI,SAACqF,EAAqBW,GAAtB,OACZ,kBAAC,IAAD,CAAK7F,IAAK6F,EAAQF,QAAST,EAAIvD,MAAOmE,KAAMZ,EAAIhC,WAElD4B,EAAUjF,KAAI,SAACkG,EAAsBC,GAAvB,OACZ,kBAAC,IAAD,CACEC,KAAK,SACLjG,IAAKgG,EACLL,QAASI,EAAKpE,MACduE,OAAQH,EAAK7C,MACbiD,YAAa,EACbC,IAAK,CAAED,YAAa,UAKhC,kBAAC,IAAD,KACGrB,EAAUuB,OAAS,EAClB,kBAAC,IAAD,CAAUpG,QAAS,kBAAMgF,GAAcjD,KACpCA,EAAY,iEAAiB,4DAE9B,QAMCsE,EAAU,SAAC,GAAqC,IAAnCxB,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,MACnC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGD,EAAUjF,KAAI,SAACqF,EAAqBnF,GAAtB,OACb,kBAAC,IAAD,CAAgBC,IAAKD,GACnB,kBAAC,IAAD,CAAgBmD,MAAOgC,EAAIhC,QAC3B,8BAAOgC,EAAIvD,YAIjB,kBAAC,IAAD,CAAqBwD,MAAM,OAAOC,OAAQ,KACxC,kBAAC,IAAD,CACE9C,KAAMyC,EACNM,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,MAAO,GAAIC,OAAQ,IAEjD,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,CAASC,mBAAmB,IAC5B,kBAAC,IAAD,CAAKD,QAAQ,qBAAMY,QAAQ,IAAIT,KAAK,YACpC,kBAAC,IAAD,CAAKH,QAAQ,2BAAOY,QAAQ,IAAIT,KAAK,YACrC,kBAAC,IAAD,CAAMH,QAAQ,qBAAMQ,YAAa,EAAGD,OAAQ,gB,QC7FzC5F,EAAqB,CAAC,SAAU,SAAU,SAAU,UACpDkG,EAAuB,CAAC,UAAW,UAAW,WC4C5CC,IAhCc,SAAC,GAGG,IAF/B1E,EAE8B,EAF9BA,aACAC,EAC8B,EAD9BA,UAC8B,EACIgD,mBAAoB,CACpDF,UAAW,GACXC,MAAO,KAHqB,mBACvB2B,EADuB,KACZC,EADY,KAM9BC,qBAAU,WACR,GAAI7E,EAAc,CAChB,IAAM2E,EACU,UAAd1E,ECwByB,SAACD,GAChC,IAAI8E,EAA+B,GAC/B/B,EAA8B,GAiBlC,OAfA/C,EAAa+E,SAAQ,SAAC5G,EAAkBH,GACtC+E,EAAS,sBACJA,GADI,CAEP,CAAEnD,MAAOzB,EAAMd,KAAM8D,MAAOsD,EAAWzG,SAI3CO,EAASwG,SAAQ,SAACC,EAAchH,GAC9B8G,EAAY,sBAAOA,GAAP,CAAqB,CAAEzH,KAAM2H,KACzChF,EAAa+E,SAAQ,SAAC5G,GACpB2G,EAAa9G,GAAKG,EAAMd,MAnDN,SAAC4H,GACvB,OAAQA,GACN,KAAM,EACJ,MAAO,kCAET,KAAM,EACJ,MAAO,4BAET,QACE,OAAOA,GA0CyBC,CAAgB/G,EAAMoC,KAAKvC,UAIrC,CAAE+E,UAAWA,EAAWC,MAAO8B,GDzC/CK,CAAkBnF,GCAA,SAACA,GAC7B,IAAI8E,EAAiC,GAmBrC,OAZA9E,EAAa+E,SAAQ,SAACK,GAA2C,IACvD1C,EAAyC0C,EAAzC1C,GAAI2C,EAAqCD,EAArCC,UAAWjG,EAA0BgG,EAA1BhG,WAAYC,EAAc+F,EAAd/F,UAC7BiG,EAA6B,CACjC5C,GAAIA,EACJrF,KAAK,GAAD,OAAKgI,EAAL,gBACJE,2BAAMlG,EAAYD,EAClBoG,qBAAKpG,EACLqG,qBAAKpG,GAEPyF,EAAY,sBAAOA,GAAP,CAAqBQ,OAET,CAAEvC,UAjBM,CAChC,CAAEnD,MAAO,qBAAOuB,MAAO,WACvB,CAAEvB,MAAO,2BAAQuB,MAAO,WACxB,CAAEvB,MAAO,qBAAOuB,MAAO,YAcyB6B,MAAO8B,GDlB/CY,CAAe1F,GACrB4E,EAAaD,MAEd,CAAC3E,EAAcC,IAdY,IAgBtB8C,EAAqB4B,EAArB5B,UAAWC,EAAU2B,EAAV3B,MAEnB,OACE,oCACiB,UAAd/C,EACC,kBAAC,EAAD,CAAY8C,UAAWA,EAAWC,MAAOA,IAEzC,kBAAC,EAAD,CAASD,UAAWA,EAAWC,MAAOA","file":"static/js/4.27c54f3a.chunk.js","sourcesContent":["export type ThemeInfo = {\n  name: string\n  icon: string | null\n}\n\nexport const seoulTheme: ThemeInfo[] = [\n  { name: '영어대학', icon: './images/english.png' },\n  { name: '프랑스어학부', icon: './images/france.png' },\n  { name: '스페인어과', icon: './images/spain.png' },\n  { name: '마인어과', icon: './images/indonesia.png' },\n  { name: '베트남어과', icon: './images/vietnam.png' },\n  { name: '중국어대', icon: './images/china.png' },\n  { name: '일본어대', icon: './images/japan.png' },\n  { name: '사과대', icon: './images/social.png' },\n  { name: '미디어커뮤니케이션학부', icon: './images/broad.png' },\n  { name: '상경대학', icon: './images/line.png' },\n  { name: '경영학전공', icon: './images/business.png' },\n  { name: 'LD/LT', icon: './images/ldlt.png' },\n  { name: '인기융합전공', icon: './images/converge.png' },\n  { name: '국제학부', icon: './images/inter.png' },\n]\n\nexport const globalTheme: ThemeInfo[] = [\n  { name: '영어통번역학과', icon: './images/trans.png' },\n  { name: '경상대', icon: './images/bus.png' },\n  { name: '통계학과', icon: './images/statistics.png' },\n  { name: '인기융합전공', icon: './images/converge.png' },\n]\n\nexport const semesterTheme: ThemeInfo[] = [\n  { name: '2018-1', icon: null },\n  { name: '2018-2', icon: null },\n  { name: '2019-1', icon: null },\n  { name: '2019-2', icon: null },\n]\n","import React from 'react'\nimport ChartMajorBox from '../ChartMajorBox'\nimport { ChartMajorBoxes } from '../../../style/styledComponents/majorBoxes'\nimport { ThemeInfo } from '../../../config/themes'\n\ntype WithSearchSelectProps = {\n  themeArr: ThemeInfo[]\n  callFunction: (name: string) => void\n  useIcon: boolean\n}\n\nconst WithSearchSelect = ({\n  themeArr,\n  callFunction,\n  useIcon,\n}: WithSearchSelectProps) => {\n  return (\n    <div className=\"chart-search\">\n      <ChartMajorBoxes>\n        {themeArr.map((theme: ThemeInfo, idx: number) => (\n          <span key={idx} onClick={() => callFunction(theme.name)}>\n            <ChartMajorBox\n              major={theme.name}\n              icon={useIcon ? theme.icon : null}\n            />\n          </span>\n        ))}\n      </ChartMajorBoxes>\n    </div>\n  )\n}\n\nexport default WithSearchSelect\n","import React from 'react'\nimport { semesterTheme } from '../../../config/themes'\nimport SearchSelect from './SearchSelect'\n\ntype BaWithSearchSelectProps = {\n  onGetBaDataByInput: (semester: string) => void\n}\n\nconst BaWithSearchSelect = ({\n  onGetBaDataByInput,\n}: BaWithSearchSelectProps) => {\n  const setSelectedSemester = (semester: string) => {\n    onGetBaDataByInput(semester)\n  }\n\n  return (\n    <SearchSelect\n      useIcon={true}\n      themeArr={semesterTheme}\n      callFunction={setSelectedSemester}\n    />\n  )\n}\n\nexport default BaWithSearchSelect\n","import React from 'react'\nimport { baParsingResult } from '../../../@types/baData'\nimport { BarChartWrap } from '../../style/styledComponents/barChart'\nimport styled from 'styled-components'\n\ntype BaChartDetailProps = {\n  baData: baParsingResult\n}\n\nconst BaDetailContent = styled.div`\n  display: flex;\n  text-align: left;\n  justify-content: space-between;\n  margin: 0.5rem 0;\n`\n\nconst BaDetailContentPart = styled.div`\n  width: 25%;\n  text-align: center;\n`\nconst BaDetailLine = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: #e2e2e2;\n  border-radius: 50%;\n`\n\nconst BaDetailPartTitle = styled.div`\n  @media screen and (max-width: 750px) {\n    font-size: 13px;\n  }\n\n  @media screen and (max-width: 420px) {\n    font-size: 13px;\n  }\n`\n\nconst BaDetailTitle = styled.div`\n  font-weight: 700;\n  margin: 0.3rem 0;\n  @media screen and (max-width: 750px) {\n    font-size: 13px;\n  }\n\n  @media screen and (max-width: 420px) {\n    font-size: 13px;\n  }\n`\n\nconst BaDetailPartContent = styled.div`\n  font-size: 1.2rem;\n  font-weight: 700;\n  @media screen and (max-width: 750px) {\n    font-size: 12px;\n  }\n  @media screen and (max-width: 420px) {\n    font-size: 12px;\n  }\n`\n\nconst BaChartAndDetail = ({ baData }: BaChartDetailProps) => {\n  const { semester, passScore, averageScore, examPasser, examTaker } = baData\n  const passRatio = ((examPasser / examTaker) * 100).toFixed(1)\n\n  return (\n    <>\n      {baData.semester && (\n        <BarChartWrap>\n          <div>\n            <BaDetailTitle>선택학기 : {semester}</BaDetailTitle>\n            <BaDetailLine />\n          </div>\n          <BaDetailContent>\n            <BaDetailContentPart>\n              <BaDetailPartTitle>합격점수</BaDetailPartTitle>\n              <BaDetailPartContent>{passScore}/60</BaDetailPartContent>\n            </BaDetailContentPart>\n            <BaDetailContentPart>\n              <BaDetailPartTitle>평균점수</BaDetailPartTitle>\n              <BaDetailPartContent>{averageScore}/60</BaDetailPartContent>\n            </BaDetailContentPart>\n            <BaDetailContentPart>\n              <BaDetailPartTitle>합격/응시</BaDetailPartTitle>\n              <BaDetailPartContent>\n                {examPasser}/{examTaker}명\n              </BaDetailPartContent>\n            </BaDetailContentPart>\n            <BaDetailContentPart>\n              <BaDetailPartTitle>합격률</BaDetailPartTitle>\n              <BaDetailPartContent>{passRatio}%</BaDetailPartContent>\n            </BaDetailContentPart>\n          </BaDetailContent>\n        </BarChartWrap>\n      )}\n    </>\n  )\n}\n\nexport default BaChartAndDetail\n","const baNotices: string[] = [\n  '이중전공 변경, 신청, 후기이중전공 신청 응시자 데이터를 모두 합산했습니다.(해당 학기에 시험 응시한 학생 전부)',\n  '평균 점수는 소수점 둘째자리에서 반올림했습니다.',\n  '매년 1학기에는 이중전공 변경 신청자가 많고, 2학기에는 새내기분들의 이중전공 신청이 많습니다.',\n  '자세한 시험일정과 정보는 경영대학 홈페이지를 참조하세요.',\n]\n\nexport default baNotices\n","import React from 'react'\nimport ChartTitle from '../chartResourceComponents/ChartTitle'\nimport { baParsingResult } from '../../../@types/baData'\nimport BaSearchSelect from '../chartResourceComponents/chartSearch/BaSearchSelect'\nimport ChartNotice from '../chartResourceComponents/ChartNotice'\nimport BaChartDetail from '../chartResourceComponents/BaChartDetail'\nimport baNotice from '../../config/baNotice'\nimport MainChart from '../chartResourceComponents/mainCharts/MainChart'\n\ntype BaDataChartProps = {\n  baData: baParsingResult\n  onGetBaDataByInput: (semester: string) => void\n}\n\nconst BaDataChart = ({ baData, onGetBaDataByInput }: BaDataChartProps) => {\n  const { passPerAdmission } = baData\n\n  return (\n    <>\n      <ChartTitle\n        title={'경영대학 이중 시험 정보'}\n        subTitle={\n          '4학기간의 경영대학 경영학전공 이중 필기 시험의 학번별 합격 통계를 조회합니다. 학기를 선택해 주세요.'\n        }\n      />\n      <BaSearchSelect onGetBaDataByInput={onGetBaDataByInput} />\n      <MainChart selectedInfo={passPerAdmission} chartType={'ba'} />\n      <BaChartDetail baData={baData} />\n      <ChartNotice\n        selectedInfo={baNotice as string[]}\n        majorNoticeType={false}\n      />\n    </>\n  )\n}\n\nexport default BaDataChart\n","import React from 'react'\nimport BaDataChart from '../chartComponents/BaDataChart'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getBaDataByInput } from '../../reducer/data'\nimport { RootState } from '../../reducer'\nimport { State } from '../../../@types/reducer.d'\n\nconst BaDataChartContainer = () => {\n  const data: State = useSelector((state: RootState) => state.data)\n  const dispatch = useDispatch()\n\n  const onGetBaDataByInput = (semester: string): void => {\n    dispatch(getBaDataByInput(semester))\n  }\n\n  return (\n    <BaDataChart baData={data.baData} onGetBaDataByInput={onGetBaDataByInput} />\n  )\n}\n\nexport default BaDataChartContainer\n","import styled from 'styled-components'\n\nexport const BarChartWrap = styled.div`\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #f7f7f7;\n  margin-top: 1rem;\n`\nexport const BarChartLegendWrap = styled.div`\n  margin-top: 1rem;\n  display: flex;\n  justify-content: center;\n  @media screen and (max-width: 440px) {\n    flex-direction: column;\n  }\n`\n\nexport const BarChartLegend = styled.div`\n  margin-right: 1rem;\n  @media screen and (max-width: 750px) {\n    font-size: 0.8rem;\n  }\n\n  @media screen and (max-width: 420px) {\n    font-size: 0.6rem;\n    text-align: left;\n    margin-left: 1rem;\n  }\n`\nexport const LegendColorBox = styled.span`\n  background-color: ${props => props.color};\n  width: 12px;\n  height: 12px;\n  margin-right: 0.3rem;\n  display: inline-block;\n  margin-top: 1rem;\n`\n\nexport const ChartBtn = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 1rem;\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\ntype ChartTitleProps = {\n  title: string\n  subTitle?: string\n}\n\nconst ChartTitleContent = styled.div`\n  font-size: 1.6rem;\n  font-weight: 700;\n  margin-bottom: 0.7rem;\n`\nconst ChartSubTitleContent = styled.div`\n  margin-bottom: 1rem;\n`\n\nconst ChartTitle = ({ title, subTitle }: ChartTitleProps) => {\n  return (\n    <>\n      <ChartTitleContent>{title}</ChartTitleContent>\n      <ChartSubTitleContent>{subTitle}</ChartSubTitleContent>\n    </>\n  )\n}\n\nexport default ChartTitle\n","import React from 'react'\nimport styled from 'styled-components'\nimport Emoji from '../Emoji'\n\ntype ChartMajorBoxProps = {\n  major: string\n  icon?: string | null\n  cancelFunction?: (major: string) => void\n}\n\nconst MajorBox = styled.span`\n  padding: 0.2rem 1rem;\n  background-color: #f6f9fc;\n  border-radius: 20px;\n  margin: 0 0.5rem 0.5rem 0;\n  font-size: 0.8rem;\n  display: flex;\n  cursor: pointer;\n  transition: background-color 0.5s;\n  &:hover {\n    background-color: #d0d9e2;\n  }\n`\n\nconst MajorBoxCloseBtn = styled.div`\n  margin-left: 1rem;\n`\n\nconst MajorBoxTitle = styled.div`\n  font-size: 0.8rem;\n`\n\nconst MajorBoxIcon = styled.img`\n  width: 1rem;\n  height: 1rem;\n  margin-right: 0.3rem;\n  margin-top: 0.1rem;\n`\n\nconst ChartMajorBox = ({ major, icon, cancelFunction }: ChartMajorBoxProps) => {\n  return (\n    <MajorBox>\n      {icon ? <MajorBoxIcon src={icon} alt={icon} /> : null}\n      <MajorBoxTitle>{major}</MajorBoxTitle>\n      {cancelFunction ? (\n        <MajorBoxCloseBtn\n          className=\"chart-major-box-close\"\n          onClick={() => cancelFunction(major)}\n        >\n          <Emoji label=\"cancel\" emoji=\"❌\" />\n        </MajorBoxCloseBtn>\n      ) : null}\n    </MajorBox>\n  )\n}\n\nexport default ChartMajorBox\n","import styled from 'styled-components'\n\nexport const ChartMajorBoxes = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 90%;\n  transition: background-color 0.8s;\n\n  @media screen and (max-width: 750px) {\n    width: 95%;\n  }\n\n  @media screen and (max-width: 380px) {\n    width: 100%;\n  }\n`\n","import React from 'react'\nimport { MajorInfo } from '../../../@types/majorData'\nimport styled from 'styled-components'\n\ntype ChartNoticeProps = {\n  selectedInfo: MajorInfo[] | string[]\n  majorNoticeType?: boolean\n}\n\nconst ChartNoticeBox = styled.div`\n  padding-top: 1rem;\n`\n\nconst ChartNoticeContent = styled.div`\n  margin-bottom: 1rem;\n  @media screen and (max-width: 750px) {\n    font-size: 0.8rem;\n  }\n\n  @media screen and (max-width: 420px) {\n    font-size: 0.7rem;\n  }\n`\n\nconst ChartNoticeTitle = styled.div`\n  background-color: #ececec;\n  padding: 0.1rem 0.5rem;\n  margin-right: 0.8rem;\n  font-weight: 700;\n  display: inline-block;\n  margin-bottom: 0.2rem;\n`\n\nconst ChartNoticeLine = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: #e2e2e2;\n  margin-top: 1rem;\n  border-radius: 50%;\n`\nconst ChartNoticeSection = styled.div`\n  margin-bottom: 0.2rem;\n  padding-left: 0.5rem;\n`\n\nconst ChartNotice = ({ selectedInfo, majorNoticeType }: ChartNoticeProps) => {\n  return (\n    <ChartNoticeBox>\n      {majorNoticeType ? (\n        <MajorChartNotice noticeResource={selectedInfo as MajorInfo[]} />\n      ) : (\n        <GeneralChartNotice noticeResource={selectedInfo as string[]} />\n      )}\n    </ChartNoticeBox>\n  )\n}\n\nconst MajorChartNotice = ({\n  noticeResource,\n}: {\n  noticeResource: MajorInfo[]\n}) => {\n  return (\n    <>\n      {noticeResource.map((major: MajorInfo, id: number) =>\n        major.notice ? (\n          <ChartNoticeContent key={id}>\n            <ChartNoticeTitle>{major.name} 지원 유의사항</ChartNoticeTitle>\n            <div>\n              {major.notice.split('&').map((notice: string, idx: number) => (\n                <ChartNoticeSection key={idx}>\n                  {idx + 1}. {notice}\n                </ChartNoticeSection>\n              ))}\n            </div>\n            <ChartNoticeLine />\n          </ChartNoticeContent>\n        ) : null,\n      )}\n    </>\n  )\n}\n\nconst GeneralChartNotice = ({\n  noticeResource,\n}: {\n  noticeResource: string[]\n}) => {\n  return (\n    <>\n      <ChartNoticeContent>\n        <ChartNoticeTitle>유의사항</ChartNoticeTitle>\n        <div>\n          {noticeResource.map((notice: string, idx: number) => (\n            <ChartNoticeSection key={idx}>\n              {idx + 1}. {notice}\n            </ChartNoticeSection>\n          ))}\n        </div>\n      </ChartNoticeContent>\n    </>\n  )\n}\n\nexport default ChartNotice\n","import React, { useState } from 'react'\nimport { ChartData, ChartDirection } from '../../../../@types/barChart'\nimport { InputBtn } from '../../../style/styledComponents/input'\n\nimport {\n  BarChartWrap,\n  BarChartLegend,\n  BarChartLegendWrap,\n  LegendColorBox,\n  ChartBtn,\n} from '../../../style/styledComponents/barChart'\n\nimport {\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n} from 'recharts'\n\nexport const MajorChart = ({ direction, chart }: ChartData) => {\n  const [chartType, setChartType] = useState<boolean>(true)\n  return (\n    <BarChartWrap>\n      <BarChartLegendWrap>\n        {direction.map((bar: ChartDirection, idx: number) => (\n          <BarChartLegend key={idx}>\n            <LegendColorBox color={bar.color}></LegendColorBox>\n            <span>{bar.title}</span>\n          </BarChartLegend>\n        ))}\n      </BarChartLegendWrap>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <ComposedChart\n          data={chart}\n          margin={{ top: 30, right: 30, left: -20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip isAnimationActive={false} />\n          {chartType\n            ? direction.map((bar: ChartDirection, barIdx: number) => (\n                <Bar key={barIdx} dataKey={bar.title} fill={bar.color} />\n              ))\n            : direction.map((line: ChartDirection, lineIdx: number) => (\n                <Line\n                  type=\"linear\"\n                  key={lineIdx}\n                  dataKey={line.title}\n                  stroke={line.color}\n                  strokeWidth={4}\n                  dot={{ strokeWidth: 6 }}\n                />\n              ))}\n        </ComposedChart>\n      </ResponsiveContainer>\n      <ChartBtn>\n        {direction.length > 0 ? (\n          <InputBtn onClick={() => setChartType(!chartType)}>\n            {chartType ? '꺾은선 그래프로 바꾸기' : '막대 그래프로 바꾸기'}\n          </InputBtn>\n        ) : null}\n      </ChartBtn>\n    </BarChartWrap>\n  )\n}\n\nexport const BaChart = ({ direction, chart }: ChartData) => {\n  return (\n    <BarChartWrap>\n      <BarChartLegendWrap>\n        {direction.map((bar: ChartDirection, idx: number) => (\n          <BarChartLegend key={idx}>\n            <LegendColorBox color={bar.color}></LegendColorBox>\n            <span>{bar.title}</span>\n          </BarChartLegend>\n        ))}\n      </BarChartLegendWrap>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <ComposedChart\n          data={chart}\n          margin={{ top: 30, right: 30, left: -20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip isAnimationActive={false} />\n          <Bar dataKey=\"합격자\" stackId=\"a\" fill=\"#82ca9d\" />\n          <Bar dataKey=\"불합격자\" stackId=\"a\" fill=\"#FFC658\" />\n          <Line dataKey=\"응시자\" strokeWidth={3} stroke={'#8884D8'} />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </BarChartWrap>\n  )\n}\n","export const semester: string[] = ['2018-2', '2019-1', '2019-2', '2020-1']\nexport const chartColor: string[] = ['#8884d8', '#82ca9d', '#ffc658']\n","import React, { useState, useEffect } from 'react'\nimport { MajorInfo } from '../../../../@types/majorData'\nimport { ChartData } from '../../../../@types/barChart'\nimport { MajorChart, BaChart } from './MainChartResources'\nimport { getMajorChartData, getBaChartData } from '../../../utils/getChartData'\nimport { passPerAdmission, baParsingResult } from '../../../../@types/baData'\n\ntype ChartVisualBarChartProps = {\n  selectedInfo: MajorInfo[] | passPerAdmission[]\n  chartType: string\n  globalBaData?: baParsingResult\n}\n\nconst ChartWithVisualChart = ({\n  selectedInfo,\n  chartType,\n}: ChartVisualBarChartProps) => {\n  const [chartData, setChartData] = useState<ChartData>({\n    direction: [],\n    chart: [],\n  })\n\n  useEffect(() => {\n    if (selectedInfo) {\n      const chartData =\n        chartType === 'major'\n          ? getMajorChartData(selectedInfo as MajorInfo[])\n          : getBaChartData(selectedInfo as passPerAdmission[])\n      setChartData(chartData)\n    }\n  }, [selectedInfo, chartType])\n\n  const { direction, chart } = chartData\n\n  return (\n    <>\n      {chartType === 'major' ? (\n        <MajorChart direction={direction} chart={chart} />\n      ) : (\n        <BaChart direction={direction} chart={chart} />\n      )}\n    </>\n  )\n}\n\nexport default ChartWithVisualChart\n","//* 선택된 데이터를 차트 컴포넌트가 요구하는 형식으로 바꾸는 함수\n\nimport { MajorInfo } from '../../@types/majorData'\nimport {\n  ChartData,\n  ChartDirection,\n  ChartSection,\n  baChartSection,\n} from '../../@types/barChart'\nimport { passPerAdmission } from '../../@types/baData'\nimport { semester, chartColor } from '../config/chart'\n\nconst chartValueValid = (value: number) => {\n  switch (value) {\n    case -1: {\n      return '데이터 없음'\n    }\n    case -2: {\n      return '제한 없음'\n    }\n    default: {\n      return value\n    }\n  }\n}\n\nexport const getBaChartData = (selectedInfo: passPerAdmission[]): ChartData => {\n  let chartSection: baChartSection[] = []\n  let direction: ChartDirection[] = [\n    { title: '응시자', color: '#8884D8' },\n    { title: '불합격자', color: '#FFC658' },\n    { title: '합격자', color: '#82ca9d' },\n  ]\n\n  selectedInfo.forEach((admissionInfo: passPerAdmission): void => {\n    const { id, admission, examPasser, examTaker } = admissionInfo\n    const newSection: baChartSection = {\n      id: id,\n      name: `${admission}학번`,\n      불합격자: examTaker - examPasser,\n      합격자: examPasser,\n      응시자: examTaker,\n    }\n    chartSection = [...chartSection, newSection as baChartSection]\n  })\n  const result: ChartData = { direction: direction, chart: chartSection }\n  return result\n}\n\nexport const getMajorChartData = (selectedInfo: MajorInfo[]): ChartData => {\n  let chartSection: ChartSection[] = []\n  let direction: ChartDirection[] = []\n\n  selectedInfo.forEach((major: MajorInfo, idx: number) => {\n    direction = [\n      ...direction,\n      { title: major.name, color: chartColor[idx] } as ChartDirection,\n    ]\n  })\n\n  semester.forEach((elem: string, idx: number) => {\n    chartSection = [...chartSection, { name: elem } as ChartSection]\n    selectedInfo.forEach((major: MajorInfo) => {\n      chartSection[idx][major.name] = chartValueValid(major.data[idx])\n    })\n  })\n\n  const result: ChartData = { direction: direction, chart: chartSection }\n  return result\n}\n"],"sourceRoot":""}