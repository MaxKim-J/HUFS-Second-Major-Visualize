{"version":3,"sources":["config/colleges.ts","utils/updateMajorInput.ts","utils/searchMajor.ts","components/chartResourceComponents/chartSearch/AllSearchSelect.tsx","components/chartComponents/AllDataChart.tsx","components/container/AllDataChartContainer.tsx","style/styledComponents/barChart.ts","components/chartResourceComponents/ChartTitle.tsx","components/chartResourceComponents/ChartMajorBox.tsx","style/styledComponents/majorBoxes.ts","components/chartResourceComponents/ChartNotice.tsx","components/chartResourceComponents/mainCharts/MainChartResources.tsx","config/chart.ts","components/chartResourceComponents/mainCharts/MainChart.tsx","utils/getChartData.ts"],"names":["seoulCollege","globalCollege","useMajorInput","college","majorArr","filter","elem","classify","map","name","searchMajor","searchFor","find","ChartSearchCompare","majorData","updateSelectedInfo","selectedInfo","campusName","useState","collegeArr","setCollegeArr","setMajorArr","major","input","setInput","useEffect","handleMajorInput","event","target","value","removeSelectedInfo","className","onChange","e","updateMajorInput","idx","key","onClick","setSelectedInfo","ChartMajorBox","cancelFunction","AllDataChart","setSelctedInfo","ChartTitle","title","subTitle","AllSearchSelect","action","info","length","alert","MainChart","chartType","ChartNotice","majorNoticeType","AllDataChartContainer","data","useSelector","state","BarChartWrap","styled","div","BarChartLegendWrap","BarChartLegend","LegendColorBox","span","props","color","ChartBtn","ChartTitleContent","ChartSubTitleContent","MajorBox","MajorBoxCloseBtn","MajorBoxTitle","MajorBoxIcon","img","icon","src","alt","label","emoji","ChartMajorBoxes","ChartNoticeBox","ChartNoticeContent","ChartNoticeTitle","ChartNoticeLine","ChartNoticeSection","MajorChartNotice","noticeResource","id","notice","split","GeneralChartNotice","MajorChart","direction","chart","setChartType","bar","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","isAnimationActive","barIdx","fill","line","lineIdx","type","stroke","strokeWidth","dot","BaChart","stackId","semester","chartColor","ChartWithVisualChart","chartData","setChartData","chartSection","forEach","chartValueValid","getMajorChartData","admissionInfo","admission","examPasser","examTaker","newSection","불합격자","합격자","응시자","getBaChartData"],"mappings":"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","file":"static/js/6.841ae44f.chunk.js","sourcesContent":["export const seoulCollege: string[] = [\n  '영어대학',\n  '서양어대학',\n  '아시아언어문화대학',\n  '중국어대학',\n  '일본어대학',\n  '사회과학대학',\n  '상경대학',\n  '사범대학',\n  '경영대학',\n  '국제학부',\n  'LD학부',\n  'LT학부',\n  '융합전공',\n]\n\nexport const globalCollege: string[] = [\n  '인문대학',\n  '통번역대학',\n  '동유럽학대학',\n  '국제지역대학',\n  '경상대학',\n  '바이오메디컬공학부',\n  '자연과학대학',\n  '공과대학',\n  '융합전공',\n]\n","import { MajorInfo } from '../../@types/majorData'\n\nconst useMajorInput = (college: string, majorArr: MajorInfo[]): string[] => {\n  const majors: MajorInfo[] = majorArr.filter(\n    (elem: MajorInfo) => elem.classify === college,\n  )\n  const result: string[] = majors.map((elem: MajorInfo) => elem.name)\n  return result\n}\n\nexport default useMajorInput\n","//* searchMajor 함수 == 인풋 : 학과명(string), majorInfo[] => 아웃풋: 학과명에 매치되는 majorInfo\nimport { MajorInfo } from '../../@types/majorData'\n\nconst searchMajor = (searchFor: string, majorArr: MajorInfo[]) => {\n  const result = majorArr.find((elem: MajorInfo) => {\n    return elem.name === searchFor\n  })\n\n  return result\n}\n\nexport default searchMajor\n","import React, { useState, useEffect } from 'react'\nimport { MajorInfo } from '../../../../@types/majorData'\nimport { seoulCollege, globalCollege } from '../../../config/colleges'\nimport updateMajorInput from '../../../utils/updateMajorInput'\nimport searchMajor from '../../../utils/searchMajor'\nimport ChartMajorBox from '../ChartMajorBox'\nimport { ChartMajorBoxes } from '../../../style/styledComponents/majorBoxes'\nimport {\n  InputSelect,\n  InputBtn,\n  InputBoxes,\n} from '../../../style/styledComponents/input'\n\ntype ChartSearchCompareProps = {\n  campusName: string\n  majorData: MajorInfo[]\n  selectedInfo: MajorInfo[]\n  updateSelectedInfo: (action: string, info: MajorInfo) => void\n}\n\nconst ChartSearchCompare = ({\n  majorData,\n  updateSelectedInfo,\n  selectedInfo,\n  campusName,\n}: ChartSearchCompareProps) => {\n  const [collegeArr, setCollegeArr] = useState<string[]>([])\n  const [majorArr, setMajorArr] = useState<string[]>([])\n  const [input, setInput] = useState({\n    college: '',\n    major: '',\n  })\n\n  useEffect(() => {\n    if (campusName) {\n      campusName === 'seoul'\n        ? setCollegeArr(seoulCollege)\n        : setCollegeArr(globalCollege)\n    }\n  }, [campusName])\n\n  const handleMajorInput = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const { name, value } = event.target\n    setInput({ ...input, [name]: value })\n  }\n\n  const updateMajorArr = (value: string): void => {\n    setMajorArr(updateMajorInput(value, majorData))\n  }\n\n  const setSelectedInfo = () => {\n    const value = input.major\n    const selectedInfo = searchMajor(value, majorData)\n    updateSelectedInfo('set', selectedInfo as MajorInfo)\n    setInput({ college: '', major: '' })\n  }\n\n  const removeSelectedInfo = (major: string) => {\n    const selectedInfo = searchMajor(major, majorData)\n    updateSelectedInfo('remove', selectedInfo as MajorInfo)\n  }\n\n  return (\n    <div className=\"chart-search\">\n      <InputBoxes>\n        {/* 단과대 인풋 */}\n        <InputSelect>\n          <select\n            className=\"chart-input-select\"\n            name=\"college\"\n            value={input.college}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>): void => {\n              handleMajorInput(e)\n              updateMajorArr(e.target.value)\n            }}\n          >\n            <option value=\"\">단과대 선택</option>\n            {collegeArr.map((college: string, idx: number) => (\n              <option key={idx} value={college}>\n                {college}\n              </option>\n            ))}\n          </select>\n        </InputSelect>\n\n        {/* 학과 인풋 */}\n        <InputSelect>\n          <select\n            className=\"chart-input-select\"\n            name=\"major\"\n            value={input.major}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>): void =>\n              handleMajorInput(e)\n            }\n          >\n            <option value=\"\">학과선택</option>\n            {majorArr.map((major: string, idx: number) => (\n              <option key={idx} value={major}>\n                {major}\n              </option>\n            ))}\n          </select>\n        </InputSelect>\n        {input.major ? (\n          <InputBtn\n            className=\"chart-input-btn\"\n            onClick={() => {\n              setSelectedInfo()\n            }}\n          >\n            추가\n          </InputBtn>\n        ) : null}\n      </InputBoxes>\n      {/*학과 박스*/}\n      <ChartMajorBoxes>\n        {selectedInfo.map((major: MajorInfo, idx: number) => (\n          <ChartMajorBox\n            key={idx}\n            major={major.name}\n            cancelFunction={removeSelectedInfo}\n          />\n        ))}\n      </ChartMajorBoxes>\n    </div>\n  )\n}\n\nexport default ChartSearchCompare\n","import React, { useState, useEffect } from 'react'\nimport { MajorInfo } from '../../../@types/majorData'\nimport ChartTitle from '../chartResourceComponents/ChartTitle'\nimport AllSearchSelect from '../chartResourceComponents/chartSearch/AllSearchSelect'\nimport MainChart from '../chartResourceComponents/mainCharts/MainChart'\nimport ChartNotice from '../chartResourceComponents/ChartNotice'\n\ntype AllDataChartProps = {\n  majorData: MajorInfo[]\n  campusName: string\n}\n\nconst AllDataChart = ({ majorData, campusName }: AllDataChartProps) => {\n  const [selectedInfo, setSelctedInfo] = useState<MajorInfo[]>([])\n\n  useEffect(() => {\n    setSelctedInfo([])\n  }, [majorData])\n\n  const updateSelectedInfo = (action: string, info: MajorInfo) => {\n    if (action === 'set') {\n      selectedInfo.length < 3\n        ? setSelctedInfo([...selectedInfo, info])\n        : alert('학과는 3개까지 선택할 수 있습니다.')\n    } else {\n      setSelctedInfo(\n        [...selectedInfo].filter((major: MajorInfo) => major !== info),\n      )\n    }\n  }\n  return (\n    <>\n      <ChartTitle\n        title={'전체보기'}\n        subTitle={\n          '선택한 캠퍼스, 학번에 해당하는 이중전공 여석을 조회합니다(비교 학과는 3개까지 선택할 수 있습니다)'\n        }\n      />\n      <AllSearchSelect\n        majorData={majorData}\n        campusName={campusName}\n        selectedInfo={selectedInfo}\n        updateSelectedInfo={updateSelectedInfo}\n      />\n      <MainChart selectedInfo={selectedInfo} chartType={'major'} />\n      <ChartNotice selectedInfo={selectedInfo} majorNoticeType={true} />\n    </>\n  )\n}\n\nexport default AllDataChart\n","import React from 'react'\nimport AllDataChart from '../chartComponents/AllDataChart'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducer'\nimport { State } from '../../../@types/reducer.d'\n\nconst AllDataChartContainer = () => {\n  const data: State = useSelector((state: RootState) => state.data)\n\n  return (\n    <AllDataChart\n      majorData={data.majorData.major}\n      campusName={data.campusName}\n    />\n  )\n}\n\nexport default AllDataChartContainer\n","import styled from 'styled-components'\n\nexport const BarChartWrap = styled.div`\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #f7f7f7;\n  margin-top: 1rem;\n`\nexport const BarChartLegendWrap = styled.div`\n  margin-top: 1rem;\n  display: flex;\n  justify-content: center;\n  @media screen and (max-width: 440px) {\n    flex-direction: column;\n  }\n`\n\nexport const BarChartLegend = styled.div`\n  margin-right: 1rem;\n  @media screen and (max-width: 750px) {\n    font-size: 0.8rem;\n  }\n\n  @media screen and (max-width: 420px) {\n    font-size: 0.6rem;\n    text-align: left;\n    margin-left: 1rem;\n  }\n`\nexport const LegendColorBox = styled.span`\n  background-color: ${props => props.color};\n  width: 12px;\n  height: 12px;\n  margin-right: 0.3rem;\n  display: inline-block;\n  margin-top: 1rem;\n`\n\nexport const ChartBtn = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 1rem;\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\ntype ChartTitleProps = {\n  title: string\n  subTitle?: string\n}\n\nconst ChartTitleContent = styled.div`\n  font-size: 1.6rem;\n  font-weight: 700;\n  margin-bottom: 0.7rem;\n`\nconst ChartSubTitleContent = styled.div`\n  margin-bottom: 1rem;\n`\n\nconst ChartTitle = ({ title, subTitle }: ChartTitleProps) => {\n  return (\n    <>\n      <ChartTitleContent>{title}</ChartTitleContent>\n      <ChartSubTitleContent>{subTitle}</ChartSubTitleContent>\n    </>\n  )\n}\n\nexport default ChartTitle\n","import React from 'react'\nimport styled from 'styled-components'\nimport Emoji from '../Emoji'\n\ntype ChartMajorBoxProps = {\n  major: string\n  icon?: string | null\n  cancelFunction?: (major: string) => void\n}\n\nconst MajorBox = styled.span`\n  padding: 0.2rem 1rem;\n  background-color: #f6f9fc;\n  border-radius: 20px;\n  margin: 0 0.5rem 0.5rem 0;\n  font-size: 0.8rem;\n  display: flex;\n  cursor: pointer;\n  transition: background-color 0.5s;\n  &:hover {\n    background-color: #d0d9e2;\n  }\n`\n\nconst MajorBoxCloseBtn = styled.div`\n  margin-left: 1rem;\n`\n\nconst MajorBoxTitle = styled.div`\n  font-size: 0.8rem;\n`\n\nconst MajorBoxIcon = styled.img`\n  width: 1rem;\n  height: 1rem;\n  margin-right: 0.3rem;\n  margin-top: 0.1rem;\n`\n\nconst ChartMajorBox = ({ major, icon, cancelFunction }: ChartMajorBoxProps) => {\n  return (\n    <MajorBox>\n      {icon ? <MajorBoxIcon src={icon} alt={icon} /> : null}\n      <MajorBoxTitle>{major}</MajorBoxTitle>\n      {cancelFunction ? (\n        <MajorBoxCloseBtn\n          className=\"chart-major-box-close\"\n          onClick={() => cancelFunction(major)}\n        >\n          <Emoji label=\"cancel\" emoji=\"❌\" />\n        </MajorBoxCloseBtn>\n      ) : null}\n    </MajorBox>\n  )\n}\n\nexport default ChartMajorBox\n","import styled from 'styled-components'\n\nexport const ChartMajorBoxes = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 90%;\n  transition: background-color 0.8s;\n\n  @media screen and (max-width: 750px) {\n    width: 95%;\n  }\n\n  @media screen and (max-width: 380px) {\n    width: 100%;\n  }\n`\n","import React from 'react'\nimport { MajorInfo } from '../../../@types/majorData'\nimport styled from 'styled-components'\n\ntype ChartNoticeProps = {\n  selectedInfo: MajorInfo[] | string[]\n  majorNoticeType?: boolean\n}\n\nconst ChartNoticeBox = styled.div`\n  padding-top: 1rem;\n`\n\nconst ChartNoticeContent = styled.div`\n  margin-bottom: 1rem;\n  @media screen and (max-width: 750px) {\n    font-size: 0.8rem;\n  }\n\n  @media screen and (max-width: 420px) {\n    font-size: 0.7rem;\n  }\n`\n\nconst ChartNoticeTitle = styled.div`\n  background-color: #ececec;\n  padding: 0.1rem 0.5rem;\n  margin-right: 0.8rem;\n  font-weight: 700;\n  display: inline-block;\n  margin-bottom: 0.2rem;\n`\n\nconst ChartNoticeLine = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: #e2e2e2;\n  margin-top: 1rem;\n  border-radius: 50%;\n`\nconst ChartNoticeSection = styled.div`\n  margin-bottom: 0.2rem;\n  padding-left: 0.5rem;\n`\n\nconst ChartNotice = ({ selectedInfo, majorNoticeType }: ChartNoticeProps) => {\n  return (\n    <ChartNoticeBox>\n      {majorNoticeType ? (\n        <MajorChartNotice noticeResource={selectedInfo as MajorInfo[]} />\n      ) : (\n        <GeneralChartNotice noticeResource={selectedInfo as string[]} />\n      )}\n    </ChartNoticeBox>\n  )\n}\n\nconst MajorChartNotice = ({\n  noticeResource,\n}: {\n  noticeResource: MajorInfo[]\n}) => {\n  return (\n    <>\n      {noticeResource.map((major: MajorInfo, id: number) =>\n        major.notice ? (\n          <ChartNoticeContent key={id}>\n            <ChartNoticeTitle>{major.name} 지원 유의사항</ChartNoticeTitle>\n            <div>\n              {major.notice.split('&').map((notice: string, idx: number) => (\n                <ChartNoticeSection key={idx}>\n                  {idx + 1}. {notice}\n                </ChartNoticeSection>\n              ))}\n            </div>\n            <ChartNoticeLine />\n          </ChartNoticeContent>\n        ) : null,\n      )}\n    </>\n  )\n}\n\nconst GeneralChartNotice = ({\n  noticeResource,\n}: {\n  noticeResource: string[]\n}) => {\n  return (\n    <>\n      <ChartNoticeContent>\n        <ChartNoticeTitle>유의사항</ChartNoticeTitle>\n        <div>\n          {noticeResource.map((notice: string, idx: number) => (\n            <ChartNoticeSection key={idx}>\n              {idx + 1}. {notice}\n            </ChartNoticeSection>\n          ))}\n        </div>\n      </ChartNoticeContent>\n    </>\n  )\n}\n\nexport default ChartNotice\n","import React, { useState } from 'react'\nimport { ChartData, ChartDirection } from '../../../../@types/barChart'\nimport { InputBtn } from '../../../style/styledComponents/input'\n\nimport {\n  BarChartWrap,\n  BarChartLegend,\n  BarChartLegendWrap,\n  LegendColorBox,\n  ChartBtn,\n} from '../../../style/styledComponents/barChart'\n\nimport {\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n} from 'recharts'\n\nexport const MajorChart = ({ direction, chart }: ChartData) => {\n  const [chartType, setChartType] = useState<boolean>(true)\n  return (\n    <BarChartWrap>\n      <BarChartLegendWrap>\n        {direction.map((bar: ChartDirection, idx: number) => (\n          <BarChartLegend key={idx}>\n            <LegendColorBox color={bar.color}></LegendColorBox>\n            <span>{bar.title}</span>\n          </BarChartLegend>\n        ))}\n      </BarChartLegendWrap>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <ComposedChart\n          data={chart}\n          margin={{ top: 30, right: 30, left: -20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip isAnimationActive={false} />\n          {chartType\n            ? direction.map((bar: ChartDirection, barIdx: number) => (\n                <Bar key={barIdx} dataKey={bar.title} fill={bar.color} />\n              ))\n            : direction.map((line: ChartDirection, lineIdx: number) => (\n                <Line\n                  type=\"linear\"\n                  key={lineIdx}\n                  dataKey={line.title}\n                  stroke={line.color}\n                  strokeWidth={4}\n                  dot={{ strokeWidth: 6 }}\n                />\n              ))}\n        </ComposedChart>\n      </ResponsiveContainer>\n      <ChartBtn>\n        {direction.length > 0 ? (\n          <InputBtn onClick={() => setChartType(!chartType)}>\n            {chartType ? '꺾은선 그래프로 바꾸기' : '막대 그래프로 바꾸기'}\n          </InputBtn>\n        ) : null}\n      </ChartBtn>\n    </BarChartWrap>\n  )\n}\n\nexport const BaChart = ({ direction, chart }: ChartData) => {\n  return (\n    <BarChartWrap>\n      <BarChartLegendWrap>\n        {direction.map((bar: ChartDirection, idx: number) => (\n          <BarChartLegend key={idx}>\n            <LegendColorBox color={bar.color}></LegendColorBox>\n            <span>{bar.title}</span>\n          </BarChartLegend>\n        ))}\n      </BarChartLegendWrap>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <ComposedChart\n          data={chart}\n          margin={{ top: 30, right: 30, left: -20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip isAnimationActive={false} />\n          <Bar dataKey=\"합격자\" stackId=\"a\" fill=\"#82ca9d\" />\n          <Bar dataKey=\"불합격자\" stackId=\"a\" fill=\"#FFC658\" />\n          <Line dataKey=\"응시자\" strokeWidth={3} stroke={'#8884D8'} />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </BarChartWrap>\n  )\n}\n","export const semester: string[] = ['2018-2', '2019-1', '2019-2', '2020-1']\nexport const chartColor: string[] = ['#8884d8', '#82ca9d', '#ffc658']\n","import React, { useState, useEffect } from 'react'\nimport { MajorInfo } from '../../../../@types/majorData'\nimport { ChartData } from '../../../../@types/barChart'\nimport { MajorChart, BaChart } from './MainChartResources'\nimport { getMajorChartData, getBaChartData } from '../../../utils/getChartData'\nimport { passPerAdmission, baParsingResult } from '../../../../@types/baData'\n\ntype ChartVisualBarChartProps = {\n  selectedInfo: MajorInfo[] | passPerAdmission[]\n  chartType: string\n  globalBaData?: baParsingResult\n}\n\nconst ChartWithVisualChart = ({\n  selectedInfo,\n  chartType,\n}: ChartVisualBarChartProps) => {\n  const [chartData, setChartData] = useState<ChartData>({\n    direction: [],\n    chart: [],\n  })\n\n  useEffect(() => {\n    if (selectedInfo) {\n      const chartData =\n        chartType === 'major'\n          ? getMajorChartData(selectedInfo as MajorInfo[])\n          : getBaChartData(selectedInfo as passPerAdmission[])\n      setChartData(chartData)\n    }\n  }, [selectedInfo, chartType])\n\n  const { direction, chart } = chartData\n\n  return (\n    <>\n      {chartType === 'major' ? (\n        <MajorChart direction={direction} chart={chart} />\n      ) : (\n        <BaChart direction={direction} chart={chart} />\n      )}\n    </>\n  )\n}\n\nexport default ChartWithVisualChart\n","//* 선택된 데이터를 차트 컴포넌트가 요구하는 형식으로 바꾸는 함수\n\nimport { MajorInfo } from '../../@types/majorData'\nimport {\n  ChartData,\n  ChartDirection,\n  ChartSection,\n  baChartSection,\n} from '../../@types/barChart'\nimport { passPerAdmission } from '../../@types/baData'\nimport { semester, chartColor } from '../config/chart'\n\nconst chartValueValid = (value: number) => {\n  switch (value) {\n    case -1: {\n      return '데이터 없음'\n    }\n    case -2: {\n      return '제한 없음'\n    }\n    default: {\n      return value\n    }\n  }\n}\n\nexport const getBaChartData = (selectedInfo: passPerAdmission[]): ChartData => {\n  let chartSection: baChartSection[] = []\n  let direction: ChartDirection[] = [\n    { title: '응시자', color: '#8884D8' },\n    { title: '불합격자', color: '#FFC658' },\n    { title: '합격자', color: '#82ca9d' },\n  ]\n\n  selectedInfo.forEach((admissionInfo: passPerAdmission): void => {\n    const { id, admission, examPasser, examTaker } = admissionInfo\n    const newSection: baChartSection = {\n      id: id,\n      name: `${admission}학번`,\n      불합격자: examTaker - examPasser,\n      합격자: examPasser,\n      응시자: examTaker,\n    }\n    chartSection = [...chartSection, newSection as baChartSection]\n  })\n  const result: ChartData = { direction: direction, chart: chartSection }\n  return result\n}\n\nexport const getMajorChartData = (selectedInfo: MajorInfo[]): ChartData => {\n  let chartSection: ChartSection[] = []\n  let direction: ChartDirection[] = []\n\n  selectedInfo.forEach((major: MajorInfo, idx: number) => {\n    direction = [\n      ...direction,\n      { title: major.name, color: chartColor[idx] } as ChartDirection,\n    ]\n  })\n\n  semester.forEach((elem: string, idx: number) => {\n    chartSection = [...chartSection, { name: elem } as ChartSection]\n    selectedInfo.forEach((major: MajorInfo) => {\n      chartSection[idx][major.name] = chartValueValid(major.data[idx])\n    })\n  })\n\n  const result: ChartData = { direction: direction, chart: chartSection }\n  return result\n}\n"],"sourceRoot":""}